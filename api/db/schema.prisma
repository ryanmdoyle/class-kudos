datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

model User {
  id                  String       @id @default(uuid())
  email               String       @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  firstName           String
  lastName            String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now())
  roles               UserRole[]
  groupsOwned         Group[]
  enrollments         Enrollment[]
  feedback            Feedback[]
  // redeemed            Redeemed[]
}

model UserRole {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  role      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Group {
  id            String       @id @default(uuid())
  name          String
  description   String?      @default("")
  enrollId      String?      @unique
  awardedPoints Int          @default(0)
  owner         User         @relation(fields: [ownerId], references: [id])
  ownerId       String
  archived      Boolean      @default(false)
  enrollments   Enrollment[]
  actions       Action[]
  feedback      Feedback[]
  // rewards     Reward[]
  // redeemed    Redeemed[]
}

model Enrollment {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
  points  Int    @default(0)
}

model Action {
  id      String @id @default(uuid())
  name    String
  value   Int
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
}

model Feedback {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String   @default("Feedback")
  value     Int      @default(1)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   String?
}

// model Redeemed {
//   id         String    @id @default(uuid())
//   user       User      @relation(fields: [userId], references: [id])
//   userId     String
//   name       String
//   cost       Int
//   response   String?
//   reviewed   Boolean   @default(false)
//   reviewedAt DateTime?
//   group      Group     @relation(fields: [groupId], references: [id])
//   groupId    String
//   createdAt  DateTime  @default(now())
// }

// model Reward {
//   id               String  @id @default(uuid())
//   name             String
//   cost             Int
//   responseRequired Boolean @default(false)
//   responsePrompt   String?
//   group            Group?  @relation(fields: [groupId], references: [id])
//   groupId          String?
// }
